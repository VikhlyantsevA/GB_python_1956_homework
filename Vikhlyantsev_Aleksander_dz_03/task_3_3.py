# Задание 3
'''
Написать функцию thesaurus(), принимающую в качестве аргументов имена сотрудников и возвращающую словарь,
в котором ключи — первые буквы имён, а значения — списки, содержащие имена, начинающиеся
с соответствующей буквы.

Например:
thesaurus("Иван", "Мария", "Петр", "Илья")
{
    "И": ["Иван", "Илья"],
    "М": ["Мария"],
    "П": ["Петр"]
}

Подумайте:
- Полезен ли будет вам оператор распаковки?
- Как поступить, если потребуется сортировка по ключам?
- Можно ли использовать словарь в этом случае?
'''
import collections


def thesaurus(*args) -> dict:
    """
    Принимает в качестве аргументов имена сотрудников и возвращает словарь, в котором ключ — первая буква имени, а
    значения — список имен, начинающихся с данной буквы.
    """
    dict_out = {}
    for name in args:
        name_formatted = name.title()
        key_ = name_formatted[0]
        if key_ in dict_out:
            dict_out.get(key_).append(name_formatted)
        else:
            dict_out[key_] = [name_formatted]
    return dict_out


res = thesaurus("Мария", "Иван", "Петр", "Илья")
print(res, end='\n\n')

# Если понадобится сортировка по ключам только для вывода содержимого словаря, то можно использовать метод sorted()
print(*sorted(res.items(), key=lambda x: x[0]), sep='\n', end='\n\n')

# Если необходимо создать объект "упорядоченный словарь", то, пожалуй, следует использовать объект OrderedDict из модуля collections
ord_res = collections.OrderedDict(sorted(res.items(), key=lambda x: x[0]))
print(ord_res.items())
# Проверка что упорядоченный словарь выдает значения по ключу
print(ord_res.get('И'))
