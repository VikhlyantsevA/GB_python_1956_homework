## Задание 5
'''
Создать вручную список, содержащий цены на товары (10–20 товаров), например:
[57.8, 46.51, 97, ...]

a) Привести каждый элемент списка к виду `<r> руб <kk> коп` и собрать их в одну строку через запятую.
Пример:
57 руб 80 коп, 46 руб 51 коп ...

Подумать, как из цены получить рубли и копейки, как добавить нули, если, например, получилось
`7 копеек` или `0 копеек` (должно быть `07 коп` или `00 коп`).
'''
from random import uniform

def transfer_list_in_str(list_in: list) -> str:
    """Преобразует каждый элемент списка (вещественное число) в строку вида '<r> руб <kk> коп' и
        формирует из них единую строковую переменную разделяя значения запятой."""
    str_out = [f'{int(price)} руб {int(100 * round(price % 1, 2)):02d} коп' for price in list_in]
    return str_out


my_list = [round(uniform(10, 100), 2) for _ in range(1, 16)]  # автоматическая генерация случайных 15 чисел
print(f'Исходный список: {my_list}')
result_1 = transfer_list_in_str(my_list)
print(f'Отформатированный список: {result_1}', end='\n\n')

'''
b) Вывести цены, отсортированные по возрастанию, новый список не создавать (доказать, что 
объект списка после сортировки остался тот же).
'''
def sort_prices(list_in: list) -> list:
    """Сортирует вещественные числа по возрастанию, не создавая нового списка"""
    list_in.sort()
    return list_in


# зафиксируйте здесь информацию по исходному списку my_list
id_before = id(my_list)

result_2 = sort_prices(my_list)
print(f'Отсортированные по возрастанию цены: {result_2}')

# зафиксируйте здесь доказательство, что результат result_2 остался тем же объектом
id_after = id(result_2)
# Сравним адрес объекта list_in в памяти до сортировки и после.
print(f"Адрес объекта list_in в памяти {'не' if id_before == id_after else ''} изменился после сортировки.", end='\n\n')

'''
c) Создать новый список, содержащий те же цены, но отсортированные по убыванию.
'''
def sort_price_adv(list_in: list) -> list:
    """Создаёт новый список и возвращает список с элементами по убыванию"""
    # пишите реализацию здесь
    list_out = sorted(list_in, reverse=True)
    return list_out

result_3 = sort_price_adv(my_list)
print(f'Отсортированные по убыванию цены: {result_3}', end='\n\n')

'''
d) Вернуть цены пяти самых дорогих товаров. Сможете ли вывести цены этих товаров по 
возрастанию, написав минимум кода?
'''
def check_five_max_elements(list_in: list) -> list:
    """Проверяет элементы входного списка вещественных чисел и возвращает
        список из ПЯТИ максимальных значений"""
    list_out = sorted(set(list_in))[-5:]
    return list_out


result_4 = check_five_max_elements(my_list)
print(f'Топ-5 самых дорогих товаров, отсортированных по возрастанию цены: {result_4}')